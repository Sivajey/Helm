Installing the way we have here will only use the default configuration options for this chart. Many times, you will want to 
customize the chart to use your preferred configuration.

To see what options are configurable on a chart, use helm inspect values

## helm inspect values stable/mariadb

You can then override any of these settings in a YAML formatted file, and then pass that file during installation.

## helm install -f config.yaml stable/mariadb

There are two ways to pass configuration data during install:

--values (or -f): Specify a YAML file with overrides. This can be specified multiple times and the rightmost file will take precedence
--set (and its variants --set-string and --set-file): Specify overrides on the command line.

When a new version of a chart is released, or when you want to change the configuration of your release, you can use the helm upgrade 
command.

An upgrade takes an existing release and upgrades it according to the information you provide. Because Kubernetes charts can be large and complex, Helm tries to perform the least invasive upgrade.
It will only update things that have changed since the last release.

## helm upgrade -f panda.yaml happy-panda stable/mariadb

We can use helm get values to see whether that new setting took effect.

## helm get values happy-panda

Now, if something does not go as planned during a release, it is easy to roll back to a previous release using helm rollback [RELEASE] [REVISION].

## helm rollback happy-panda 1

The above rolls back our happy-panda to its very first release version. A release version is an incremental revision. 
Every time an install, upgrade, or rollback happens, the revision number is incremented by 1. The first revision number is always 1. 
And we can use helm history [RELEASE] to see revision numbers for a certain release.

When it is time to uninstall or delete a release from the cluster, use the helm delete command:

## helm delete happy-panda

This will remove the release from the cluster. You can see all of your currently deployed releases with the helm list command:

## helm list

However, Helm always keeps records of what releases happened. Need to see the deleted releases? helm list --deleted shows those, 
and helm list --all shows all of the releases (deleted and currently deployed, as well as releases that failed):

## helm list --all

So far, weâ€™ve been installing charts only from the stable repository. But you can configure helm to use other repositories. 
Helm provides several repository tools under the helm repo command.

You can see which repositories are configured using helm repo list:

## helm repo list

And new repositories can be added with helm repo add:

## helm repo add dev https://example.com/dev-charts

Because chart repositories change frequently, at any point you can make sure your Helm client is up to date by 
running helm repo update.
